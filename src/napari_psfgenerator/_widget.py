"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

from propagators import ScalarCartesianPropagator, ScalarPolarPropagator, VectorialCartesianPropagator, VectorialPolarPropagator
import torch
import numpy as np

if TYPE_CHECKING:
    import napari


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def propagator_widget(
        n_pix_pupil: int = 203,
        n_pix_psf: int = 201,
        na: float = 1.4,
        wavelength: float = 632,
        fov: float = 2000,
        defocus: float = 4000,
        n_defocus: int = 200,
        apod_factor: bool = False,
        gibson_lanni: bool = True,
        zernike_astigmatism: float = 0.0,
        e0x: float = 1.0,
        e0y: float = 0.0) -> "napari.types.ImageData":

    # Parameters
    kwargs = {
        'n_pix_pupil': n_pix_pupil,
        'n_pix_psf': n_pix_psf,
        'n_defocus': n_defocus,
        'wavelength': wavelength,
        'zernike_coefficients': [0, 0, 0, zernike_astigmatism],
        'na': na,
        'fov': fov,
        'defocus_min': -defocus,
        'defocus_max': defocus,
        'apod_factor': apod_factor,
        'gibson_lanni': gibson_lanni
    }

    # Define propagators
    propagators = [
        ScalarCartesianPropagator(**kwargs),
        # ScalarPolarPropagator(**kwargs),
        VectorialCartesianPropagator(e0x=e0x, e0y=e0y, **kwargs),
        # VectorialPolarPropagator(e0x=e0x, e0y=e0y, **kwargs)
    ]

    result_images = []

    # Process and return fields for each propagator
    for propagator in propagators:
        class_name = propagator.__class__.__name__
        print(f"Computing field for {class_name}...")
        field = propagator.compute_focus_field()

        if 'Scalar' in class_name:
            # For scalar propagators, return the absolute value of the field
            result_images.append(torch.abs(field).numpy().squeeze())

        if 'Vectorial' in class_name:
            # For vectorial propagators, return the intensity (sum of squares of components)
            intensity = torch.sqrt(torch.sum(torch.abs(field[:, :, :, :].squeeze()) ** 2, dim=1)).squeeze()
            result_images.append(intensity.numpy())
            


    return np.array(result_images)  # This would be a 4D numpy array, which napari can visualize.